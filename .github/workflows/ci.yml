name: Deploy App

on:
  # Runs on pushes targeting the default branch
  push:
    branches: [ '**' ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Allow one concurrent deployment
concurrency:
  group: ${{ github.ref_name }}
  cancel-in-progress: ${{ github.ref_name != 'main' && github.ref_name != 'staging'}}

jobs:
  backend-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.11.4
        uses: actions/setup-python@v3
        with:
          python-version: 3.11.4
      - name: Install pycodestyle
        run: pip install pycodestyle==2.5.0
      - name: Lint backend
        run: pycodestyle --ignore=E501,W504 --exclude=migrations

  backend-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        image: postgres:15.2-alpine
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v1
      - name: Set up Python 3.11.4
        uses: actions/setup-python@v1
        with:
          python-version: 3.11.4
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Django Testing project
        run: python3 manage.py test
  # https://github.com/mathieudutour/github-tag-action#bumping
  # https://github.com/semantic-release/semantic-release
  tag:
    runs-on: ubuntu-latest
    needs: [ backend-lint, backend-test ]
    if: ${{ github.ref_name == 'main'}}
    steps:
      - uses: actions/checkout@v3
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Create a GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}

  prepare:
    runs-on: ubuntu-latest
    needs: [ backend-lint, backend-test ]
    if: ${{ github.ref_name == 'main' || github.ref_name == 'staging'}}
    steps:
      - uses: actions/checkout@v3
      - name: Some check on branch
        id: branch_check
        run: |
          echo "Running on branch ${{ github.ref_name }}"
          if [ "${{ github.ref_name }}" = "main" ]; then
            echo "::set-output name=env_name::production"
          elif [ "${{ github.ref_name }}" = "staging" ]; then
            echo "::set-output name=env_name::staging"
          fi
      - name: Use variable setup in previous step
        run: echo "I'm using variable ${{ steps.branch_check.outputs.env_name }}"

    outputs:
      env_name: ${{ steps.branch_check.outputs.env_name }}

  deploy:
    runs-on: ubuntu-latest
    needs: [ prepare ]
    environment:
      name: ${{ needs.prepare.outputs.env_name }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Deploy using ssh
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            export DJANGO_SETTINGS_MODULE=config.settings;
            cd marketplace;
            git config user.name "$(git log -n 1 --pretty=format:%an)"
            git config user.email "$(git log -n 1 --pretty=format:%ae)"
            git checkout ${{ github.ref_name }}
            git pull origin ${{ github.ref_name }}
            sudo pip3 install -r requirements.txt;
            python3 manage.py migrate;
            python3 manage.py collectstatic --no-input;
            python3 manage.py runcrons
            sudo systemctl restart gunicorn;
            sudo systemctl restart supervisor;
